# The debian images maintained by Singularity don't apt-get update
# successfully so we use Docker's
Bootstrap: docker
From: debian:9

# Commands here are executed outside of the container, directly on the
# host system after the base OS is installed
%setup
		# Get build flags from host
		echo "export CFLAGS='$(ompi_info --all --parsable | grep 'option:build:cflags' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars
		echo "export CXXFLAGS='$(ompi_info --all --parsable | grep 'option:build:cxxflags' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars
		echo "export FCFLAGS='$(ompi_info --all --parsable | grep 'option:build:fcflags' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars
		echo "export LDFLAGS='$(ompi_info --all --parsable | grep 'option:build:ldflags' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars
		echo "export LIBS='$(ompi_info --all --parsable | grep 'option:build:libs' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars

		# get wrapper flags from host
		echo "export WRAPPER_CFLAGS='$(ompi_info --all --parsable | grep 'option:wrapper:extra_cflags' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars
		echo "export WRAPPER_CXXFLAGS='$(ompi_info --all --parsable | grep 'option:wrapper:extra_cxxflags' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars
		echo "export WRAPPER_FCFLAGS='$(ompi_info --all --parsable | grep 'option:wrapper:extra_fcflags' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars
		echo "export WRAPPER_LDFLAGS='$(ompi_info --all --parsable | grep 'option:wrapper:extra_ldflags' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars
		echo "export WRAPPER_LIBS='$(ompi_info --all --parsable | grep 'option:wrapper:extra_libs' | cut -d: -f4)'" >> "$SINGULARITY_ROOTFS"/host_vars


# Copy files from host or previous stages to container
%files
    hpl/Make.Linux_AtlasCBLAS_Lam /Make.Linux_AtlasCBLAS_Lam
    hpccinf.txt


# Environment variables that are available at runtime, not build
# time. This section is written to a file in the container metadata
# directory /.singularity.d/env/90-environment.sh and sourced.
%environment
    export OMPI_DIR=/opt/ompi
    export PATH=$PATH:$OMPI_DIR/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OMPI_DIR/lib


%post
    echo "Installing required packages..."
    apt-get update && apt-get install -y \
		    wget \
				bash \
				gcc \
				gfortran \
				g++ \
				make \
				libibverbs1 \
				libibverbs-dev \
				libfabric1 \
				libfabric-dev \
				libhwloc5 \
				libhwloc-plugins \
				libhwloc-dev \
				libmlx4-1 \
        libmlx4-dev \
				libmlx5-1 \
        libmlx5-dev

    echo "Installing Open MPI"
    export OMPI_DIR=/opt/ompi
		export OMPI_MAJOR_VERSION=2.0
		export OMPI_MINOR_VERSION=2
    export OMPI_VERSION="$OMPI_MAJOR_VERSION.$OMPI_MINOR_VERSION"
    export OMPI_URL="https://download.open-mpi.org/release/open-mpi/v$OMPI_MAJOR_VERSION/openmpi-$OMPI_VERSION.tar.gz"
    mkdir -p $OMPI_DIR
    # Download
    cd $OMPI_DIR && wget -O openmpi-$OMPI_VERSION.tar.gz $OMPI_URL && tar -xzf openmpi-$OMPI_VERSION.tar.gz

    . /host_vars
    # Compile and install
		export OMPI_DIR=/opt/ompi
		export OMPI_MAJOR_VERSION=2.0
		export OMPI_MINOR_VERSION=2
    export OMPI_VERSION="$OMPI_MAJOR_VERSION.$OMPI_MINOR_VERSION"

    cd $OMPI_DIR/openmpi-$OMPI_VERSION && \
		./configure \
		    --prefix=$OMPI_DIR \
				--enable-mpi-thread-multiple \
			  --disable-heterogeneous \
				--with-wrapper-cflags="$WRAPPER_CFLAGS" \
				--with-wrapper-cxxflags="$WRAPPER_CXXFLAGS" \
				--with-wrapper-fcflags="$WRAPPER_FCFLAGS" \
				--with-wrapper-ldflags="$WRAPPER_LDFLAGS" \
				--with-wrapper-libs="$WRAPPER_LIBS" \
				&& \
    make -j $(nproc) install

		cd /

		apt-get update && apt-get install -y libatlas3-base libopenmpi-dev git build-essential

    cd / && git clone https://github.com/icl-utk-edu/hpcc.git
		cp /Make.Linux_AtlasCBLAS_Lam /hpcc/hpl
		cp /hpccinf.txt /hpcc

		cd /hpcc && make arch=Linux_AtlasCBLAS_Lam

		# Text redirected to the $SINGULARITY_ENVIRONMENT variable during
    # %post is added to a file and sourced at runtime
    # /.singularity.d/env/91-environment.sh


# Contents of this section are written to a file within the container
# at build time. This file is executed when the "singularity instance
# start" command is issued.
%startscript


# Contents of this section are written to a file within the container
# at build time. This file is executed when the "singularity run"
# command is issued.
%runscript
/hpcc/hpcc


# This section adds metadata to the /.singularity.d/labels.json file
# within the container. Usually <name> <value> pairs. Shows up in
# "singularity inspect" command.
%labels


# This section is written to a metadata file in the container during
# build. It is displayed using the "run-help" command.
%help
